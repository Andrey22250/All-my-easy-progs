#include <iostream>
#include <string>
#include <Windows.h>
#include <algorithm>
#define N 100

using namespace std;

void bubble(string item[], int count);
void Quick_Sort(int left, int right, string a[]);
int Search_Binary(string a[], int left, int right, string key);

int main()
{
	setlocale(LC_ALL, "");
	SetConsoleCP(1251);
	string a[N], b[N], c[N], key;
	int i, n;
	cout << "Введите кол-во элементов: ";
	cin >> n;
	cout << "Введите элементы массива: ";
	for (i = 0; i < n; i++)
	{
		cin >> a[i];
		c[i] = b[i] = a[i];
	}
	/*1 задание - обменная сортировка - сортировка пузырьком*/
	cout << "Исходный массив: ";
	for (i = 0; i < n; i++)
		cout << a[i] << ' ';
	bubble(a, n);
	cout << "\nОтсортированный массив пузырьком: ";
	/*2 задание - сортировка Хоара*/
	for (i = 0; i < n; i++)
		cout << a[i] << ' ';
	Quick_Sort(0, n-1, b);
	cout << "\n\nОтсортированный массив быстрой сортировкой: ";
	for (i = 0; i < n; i++)
		cout << b[i] << ' ';
	/*3 задание - бинарный поиск в обратном массиве*/
	cout << "\n\nВведите строку для поиска: ";
	cin >> key;
	cout << "Индекс искомого элемента: " << Search_Binary(a, 0, n - 1, key);
	/*4 задание - использование библиотек*/
	sort(c, c + n);
	reverse(c, c + n);
	cout << "\n\nОтсортированный массив библиотекой: ";
	for (i = 0; i < n; i++)
		cout << c[i] << ' ';
	reverse(c, c + n);
	if (binary_search(c, c + n, key))
		cout << "\nЕсть в массиве";
	else
		cout << "\nНет в массиве";
}

void bubble(string item[], int count)
{
	int a, b;
	string t;
	for (a = 1; a < count; ++a)
		for (b = 1; b < count; ++b) 
		{
				if (item[b - 1] < item[b]) 
				{
					/* Меняем местами */
					t = item[b - 1];
					item[b - 1] = item[b];
					item[b] = t;
				}
		}
}

void Quick_Sort(int left, int right, string a[]) {
	int i, j;
	string m, h;
	i = left;
	j = right;
	m = a[(i + j + 1) / 2];  //Берём средний элемент массива
	do {
		while (a[i] > m) i++; //Ищем элемент справа больший m
		while (a[j] < m) j--; //Ищем элемент слева меньший m
		if (i <= j)		//Обмен местами элементов
		{
			h = a[j];
			a[j] = a[i];
			a[i] = h;
			i++; j--;	//Для следующего прогона
		}
	} while (i <= j);
	if (left < j)	//Если не дошли до левого края - перезапуск с ограничением справа
		Quick_Sort(left, j, a); 
	if (i < right)	//Если не дошли до правого края - перезапуск с ограничением слева
		Quick_Sort(i, right, a);
}


int Search_Binary(string a[], int left, int right, string key)
{
	int midd = 0;
	while (true)
	{
		midd = (left + right) / 2;

		if (key > a[midd])       // если искомое меньше значения в ячейке - смещаем правую границу поиска
			right = midd - 1;
		else if (key < a[midd])  // если искомое больше значения в ячейке - смещаем левую границу поиска
			left = midd + 1;  
		else                       // иначе (значения равны) - функция возвращает индекс ячейки
			return midd;    

		if (left > right)          // если границы сомкнулись - возращаем -1
			return -1;
	}
}